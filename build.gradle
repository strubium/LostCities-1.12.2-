import org.jetbrains.gradle.ext.Application
import org.jetbrains.gradle.ext.Gradle
import org.jetbrains.gradle.ext.RunConfigurationContainer

plugins {
  id("java-library")
  id("maven-publish")
  id("org.jetbrains.gradle.plugin.idea-ext") version "1.1.7"
  id("eclipse")
  id("com.gtnewhorizons.retrofuturagradle") version "1.3.19"
}

repositories {

    maven { // JEI
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        name 'OC Repo'
        url "https://maven.cil.li/"
    }
    maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven { // McJtyLib
        url "https://maven.k-4u.nl"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
    name = "OvermindDL1 Maven"
    url = uri("https://gregtech.overminddl1.com/")
    mavenContent {
      excludeGroup("net.minecraftforge") // missing the `universal` artefact
    }
  }
  maven {
    name = "GTNH Maven"
    url = uri("http://jenkins.usrv.eu:8081/nexus/content/groups/public/")
    isAllowInsecureProtocol = true
  }
}
group= "com.github.strubium" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
version = "1.0.0"
archivesBaseName = "lostcities"

// Set the toolchain version to decouple the Java we run Gradle with from the Java used to compile and run the mod
java {
  toolchain {
    languageVersion.set(JavaLanguageVersion.of(8))
    // Azul covers the most platforms for Java 8 toolchains, crucially including MacOS arm64
    vendor.set(org.gradle.jvm.toolchain.JvmVendorSpec.AZUL)
  }
  // Generate sources and javadocs jars when building and publishing
  withSourcesJar()
  withJavadocJar()
}



// Most RFG configuration lives here, see the JavaDoc for com.gtnewhorizons.retrofuturagradle.MinecraftExtension
minecraft {
  mcVersion.set("1.12.2")

  // Username for client run configurations
  username.set("Developer")

  // Generate a field named VERSION with the mod version in the injected Tags class
  injectedTags.put("VERSION", project.version)

  // If you need the old replaceIn mechanism, prefer the injectTags task because it doesn't inject a javac plugin.
  // tagReplacementFiles.add("RfgExampleMod.java")

  // Enable assertions in the mod's package when running the client or server
  extraRunJvmArguments.add("-ea:${project.group}")

  // If needed, add extra tweaker classes like for mixins.
  // extraTweakClasses.add("org.spongepowered.asm.launch.MixinTweaker")

  // Exclude some Maven dependency groups from being automatically included in the reobfuscated runs
  groupsToExcludeFromAutoReobfMapping.addAll("com.diffplug", "com.diffplug.durian", "net.industrial-craft")
}



dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2859'
    implementation "mezz.jei:jei_${jei_version}"
    implementation "mcjty.theoneprobe:TheOneProbe-${top_version}"
    implementation "cofh:RedstoneFlux:${redstoneflux_version}"

}

jar {
    manifest {
        attributes 'FMLAT': 'lostcities_at.cfg'
    }
}

tasks.processIdeaSettings.configure {
  dependsOn(tasks.injectTags)
}
