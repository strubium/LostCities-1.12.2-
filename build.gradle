import org.jetbrains.gradle.ext.Gradle

plugins {
    id 'java'
    id 'java-library'
    id 'maven-publish'
    id 'org.jetbrains.gradle.plugin.idea-ext' version '1.1.7'
    id 'eclipse'
    id 'com.gtnewhorizons.retrofuturagradle' version '1.3.27'
    id 'com.matthewprenger.cursegradle' version '1.4.0'
}
// Set the toolchain version to decouple the Java we run Gradle with from the Java used to compile and run the mod
java {
    toolchain {
        languageVersion.set(JavaLanguageVersion.of(8))
        // Azul covers the most platforms for Java 8 toolchains, crucially including MacOS arm64
        vendor.set(org.gradle.jvm.toolchain.JvmVendorSpec.AZUL)
    }
    // Generate sources and javadocs jars when building and publishing
    withSourcesJar()
    // withJavadocJar()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}

configurations {
    embed
    implementation.extendsFrom(embed)
}

repositories {
    maven { // JEI
        url "https://dvs1.progwml6.com/files/maven"
    }
    maven {
        name 'OC Repo'
        url "https://maven.cil.li/"
    }
    maven { // TOP
        name 'tterrag maven'
        url "https://maven.tterrag.com/"
    }
    maven { // McJtyLib
        url "https://maven.k-4u.nl"
    }
    maven {
        name = "sonatype"
        url = "https://oss.sonatype.org/content/repositories/snapshots/"
    }
    maven {
        name = "CoFH Maven"
        url = "https://maven.covers1624.net"
    }
    mavenLocal()
}

def ENV = System.getenv()
if (ENV.DRONE_BUILD_NUMBER) {
    version += ".n" + ENV.DRONE_BUILD_NUMBER
}
group= "com.github.strubium" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "lostcities"

sourceCompatibility = 1.8
targetCompatibility = 1.8



minecraft {
      mcVersion = '1.12.2'

    // MCP Mappings
    mcpMappingChannel = 'stable'
    mcpMappingVersion = '39'
    
    // Set username here, the UUID will be looked up automatically
    username = 'Developer'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'dev'
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2859'
    implementation "mezz.jei:jei_${jei_version}"
    implementation "mcjty.theoneprobe:TheOneProbe-${top_version}"
    implementation "cofh:RedstoneFlux:${redstoneflux_version}"

}

jar {
    manifest {
        def attribute_map = [:]
        if (project.use_coremod.toBoolean()) {
            attribute_map['FMLCorePlugin'] = project.coremod_plugin_class_name
            if (project.include_mod.toBoolean()) {
                attribute_map['FMLCorePluginContainsFMLMod'] = true
                attribute_map['ForceLoadAsMod'] = project.gradle.startParameter.taskNames[0] == "build"
            }
        }
        if (project.use_access_transformer.toBoolean()) {
            attribute_map['FMLAT'] = project.archives_base_name + '_at.cfg'
        }
        attributes(attribute_map)
    }
    // Add all embedded dependencies into the jar
    from(provider{ configurations.embed.collect {it.isDirectory() ? it : zipTree(it)} })
}

idea {
    module {
        inheritOutputDirs = true
    }
    project {
        settings {
            runConfigurations {
                "1. Run Client"(Gradle) {
                    taskNames = ["runClient"]
                }
                "2. Run Server"(Gradle) {
                    taskNames = ["runServer"]
                }
                "3. Run Obfuscated Client"(Gradle) {
                    taskNames = ["runObfClient"]
                }
                "4. Run Obfuscated Server"(Gradle) {
                    taskNames = ["runObfServer"]
                }
            }
            compiler.javac {
                afterEvaluate {
                    javacAdditionalOptions = "-encoding utf8"
                    moduleJavacAdditionalOptions = [
                            (project.name + ".main"): tasks.compileJava.options.compilerArgs.collect { '"' + it + '"' }.join(' ')
                    ]
                }
            }
        }
    }
}
